<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>The React component renders a collapsable and expandable tree of navigation options.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_reactor.TreeNavigation</name>
        <script><![CDATA[class TreeNavigation extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		var strCollapseMode = GetStringValue(this.props.collapse_mode);
		if (strCollapseMode == '')
		{
			strCollapseMode = 'all';
		}
		this.state = {
			treenavigation: this.props.treenavigation,
			filter: GetStringValue(this.props.filter),
			collapse_mode: strCollapseMode,
			collapse_all_level: GetIntegerValue(this.props.collapse_all_level)
		};
	}

	onClick()
	{
		var strValue = GetStringValue(event.target.attributes.value.value);
		if (typeof this.props.callbackOnClick == 'function')
		{
			this.props.callbackOnClick(strValue);
		}
	}

	onFilterReset()
	{
		if (typeof this.props.callbackOnFilterReset == 'function')
		{
			this.props.callbackOnFilterReset();
		}
	}
	
	onClickCollapse()
	{
		var strValue = GetStringValue(event.target.attributes.value.value);
		this.setCollapsed(strValue,true);
	}	
	
	onClickExpand()
	{
		var strValue = GetStringValue(event.target.attributes.value.value);
		this.setCollapsed(strValue,false);
	}
	
	setCollapsed(strValue,bCollapsed)
	{
		this.onFilterReset();

		var aPath = GetArrayValue(strValue);
		for (var nKey = 0; nKey < aPath.length; nKey++)
		{
			aPath[nKey] = GetIntegerValue(aPath[nKey]);
		}
		var treenavigation = this.state.treenavigation;
				
		function SetTreeNavigationCollapsed(THIS,treenavigation,bCollapsed,nLevel)
		{
			nLevel = GetIntegerValue(nLevel);
			var aItems = GetArrayValue(GetValue(treenavigation,'items'));
			for (var nItem = 0; nItem < aItems.length; nItem++)
			{
				var item = aItems[nItem];
				var strLabel = GetStringValue(GetValue(item,'label'));
				if (strLabel != '')
				{
					var bHasSubItems = false;
					var aSubItems = GetArrayValue(GetValue(item,'items'));
					if (aSubItems.length > 0)
					{
						bHasSubItems = true;
					}
					
					if (bHasSubItems == true)
					{
						if (GetIntegerValue(THIS.state.collapse_all_level) <= nLevel)
						{
							treenavigation = SetValue(bCollapsed,treenavigation,'items',nItem,'collapsed');
						}
						else
						{
							treenavigation = SetValue(false,treenavigation,'items',nItem,'collapsed');
						}
						item = SetTreeNavigationCollapsed(THIS,item,bCollapsed,nLevel+1);	
						treenavigation = SetValue(item,treenavigation,'items',nItem);
					}
				}
			}
			return treenavigation;
		}
		
		
		if (this.state.collapse_mode == 'none')
		{
			treenavigation = SetTreeNavigationCollapsed(this,treenavigation,false,0);
		}
		else if (this.state.collapse_mode == 'all')
		{
			treenavigation = SetTreeNavigationCollapsed(this,treenavigation,true,0);
		}		
		
		if (aPath.length == 1)
		{
			treenavigation = SetValue(bCollapsed,treenavigation,
				'items',GetValue(aPath,0),
				'collapsed');
		}
		else if (aPath.length == 2)
		{
			treenavigation = SetValue(bCollapsed,treenavigation,
				'items',GetValue(aPath,0),
				'items',GetValue(aPath,1),
				'collapsed');
		}
		else if (aPath.length == 3)
		{
			treenavigation = SetValue(bCollapsed,treenavigation,
				'items',GetValue(aPath,0),
				'items',GetValue(aPath,1),
				'items',GetValue(aPath,2),
				'collapsed');
		}
		else if (aPath.length == 4)
		{
			treenavigation = SetValue(bCollapsed,treenavigation,
				'items',GetValue(aPath,0),
				'items',GetValue(aPath,1),
				'items',GetValue(aPath,2),
				'items',GetValue(aPath,3),
				'collapsed');
		}		
		this.onFilterReset();
		this.setState({
			treenavigation: treenavigation,
			collapse_mode: 'user',
			filter: ''
			});	
	}
	
	onClickCollapseAll()
	{
		this.onFilterReset();
		this.setState( { collapse_mode: 'all', filter: '' });
	}	
	
	onClickExpandAll()
	{
		this.onFilterReset();
		this.setState( { collapse_mode: 'none', filter: '' });
	}	
	
	onClickRecover()
	{
		this.onFilterReset();
		this.setState( { collapse_mode: 'user', filter: '' });
	}
	
	/*onInputFilter()
	{
		var strValue = GetStringValue(event.target.value);
		this.setState( { filter: strValue });
	}
	*/
	onChangeInputFilter(strValue)
	{
		this.setState( { filter: strValue });
	}
	
	renderIconCollapsed()
	{
		return e(Icon, { icon: 'caret-down' });
	}

	renderIconExpanded()
	{
		return e(Icon, { icon: 'caret-right' });
	}	
	
	renderIconRecover()
	{
		return e(Icon, { icon: 'caret-square-o-down' });
	}		
	
	renderNavigationRow(nLevel,children)
	{
		return e('div',
			{
				style:
				{
					flex: '0 0 auto',
					whiteSpace: 'nowrap',
					marginLeft: (nLevel * 15) + 'px'
				}
			},children);
	}
	
	
	render()
	{
		var treenavigation = this.state.treenavigation;
		
		var aComponents = [];
		
		var strFilter = '';
		if (this.props.filter_show == true)
		{
			strFilter = GetStringValue(this.state.filter); 
			/*var componentFilterInput = e('input',{
				style: { width: '100%'},
				value: this.state.filter,
				onInput: this.onInputFilter,
				},null);
*/
			var componentFilterInput = e(FilterInput,
				{
					//style: { width: '100%'},
					value: this.state.filter,
					callbackOnChange: this.onChangeInputFilter,
				});

			aComponents.push(componentFilterInput);
		}
		else
		{
			strFilter = GetStringValue(this.props.filter); 	
		}
		strFilter = strFilter.toLowerCase();

		var strCollapseMode = this.state.collapse_mode;
		if (strFilter != '')
		{
			strCollapseMode = 'none';
		}

		var componentLinkCollapseAll = e('a',
			{
				onClick: this.onClickCollapseAll
			}, this.renderIconExpanded());
		var componentLinkRecover = e('a',
			{
				onClick: this.onClickRecover
			}, this.renderIconRecover());			
		var componentLinkExpandAll = e('a',
			{
				onClick: this.onClickExpandAll
			}, this.renderIconCollapsed());		
		
		var aTools = [];
		if (strCollapseMode != 'all')
		{
			aTools.push(componentLinkCollapseAll);
		}
		if (strCollapseMode != 'user')
		{
			aTools.push(componentLinkRecover);
		}
		if (strCollapseMode != 'none')
		{
			aTools.push(componentLinkExpandAll);
		}		


		var componentToolsInner = e('div',
			{
				style: { zIndex: '1', position: 'fixed' }
			},
			aTools);		
		
		var componentToolsOuter = e('div',
			{
				style: { width: '100%', height: '20px', textAlign: 'right' }
			},
			componentToolsInner);	
			
		aComponents.push(componentToolsOuter);

		function RenderNavigationTree(THIS,treenavigation,nLevel,aPath)
		{
			var aComponents = [];
			var bVisibleItems = false;
			nLevel = GetIntegerValue(nLevel);
			aPath = GetArrayValue(aPath);
			var aItems = GetArrayValue(GetValue(treenavigation,'items'));
			for (var nItem = 0; nItem < aItems.length; nItem++)
			{
				var aItemComponents = [];
				var aSubComponents = [];
				var aPathClone = Clone(aPath);
				aPathClone.push(nItem);				
				
				var item = aItems[nItem];
				var strLabel = GetStringValue(GetValue(item,'label'));
				var componentLabel = strLabel;

				if (strLabel != '')
				{
					var bHasSubItems = false;
					var aSubItems = GetArrayValue(GetValue(item,'items'));
					if (aSubItems.length > 0)
					{
						bHasSubItems = true;
					}
					
					if (bHasSubItems == false)
					{
						var bVisible = true;
						if (strFilter != '')
						{
							var strLabelLowerCase = strLabel.toLowerCase();
							if (strLabelLowerCase.indexOf(strFilter) == -1)
							{
								bVisible = false;
							}
						}
						
						if (bVisible == true)
						{
							
							var strValue = GetStringValue(GetValue(item,'value'));
							aItemComponents.push(
								THIS.renderNavigationRow(
									nLevel,
									e('a',
									{
										style: {
											borderLeft: (nLevel * 5) + 'px'
										},
										onClick: THIS.onClick,
										value: strValue,
									},componentLabel)
								));
							bVisibleItems = true;
						}
					}
					else // has sub items
					{
						var componentLinkCollapse = null;
						var bCollapsed = GetBoolValue(GetValue(item,'collapsed'));
						if (strCollapseMode == 'all')
						{
							bCollapsed = true;
							if (GetIntegerValue(THIS.state.collapse_all_level) > nLevel)
							{
								bCollapsed = false;
							}
						}
						if (strCollapseMode == 'none')
						{
							bCollapsed = false;
						}						
						if (bCollapsed == true)
						{
							componentLinkCollapse = 
								e('a',
									{
										style:
										{
											fontWeight: 'bold',
										},
										onClick: THIS.onClickExpand,
										value: aPathClone,
									},
									[
										THIS.renderIconCollapsed(),
										componentLabel
									]
								 );
						}
						else
						{
							componentLinkCollapse = 
								e('a',
									{
										style:
										{
											fontWeight: 'bold',
										},
										onClick: THIS.onClickCollapse,
										value: aPathClone,
									},
									[
										THIS.renderIconExpanded(),
										componentLabel
									]
								 );
						}

						if (bCollapsed == false)
						{
							aSubComponents = RenderNavigationTree(THIS,item,nLevel+1,aPathClone);
						}

						if (strFilter == '' || aSubComponents.length > 0)
						{
							aItemComponents.push(
								THIS.renderNavigationRow(
									nLevel,
									componentLinkCollapse));
							aItemComponents = ArrayAppend(aItemComponents,aSubComponents);
						}
					}
				}
				aComponents = ArrayAppend(aComponents,aItemComponents);
			}
			return aComponents;
		}
		
		aComponents = ArrayAppend(aComponents,RenderNavigationTree(this,treenavigation));
		
		return e('div',
			{
				className: 'treenavigation',
				style:
				{
					display: 'table-cell',
					flexDirection: 'column',

					overflowY: 'auto',
					overflowX: 'auto',

					paddingLeft: '10px'
				}
			},aComponents);		
	}	
}]]></script>
        <script_name>TreeNavigation</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-10 13:52:45</sys_created_on>
        <sys_id>ecc8aa5297d36910a6a07767f053af4f</sys_id>
        <sys_mod_count>180</sys_mod_count>
        <sys_name>x_snc_reactor.TreeNavigation</sys_name>
        <sys_package display_value="Reactor" source="x_snc_reactor">e5879c7fdb39d110dcbdd03cd3961946</sys_package>
        <sys_policy/>
        <sys_scope display_value="Reactor">e5879c7fdb39d110dcbdd03cd3961946</sys_scope>
        <sys_update_name>sys_ui_script_ecc8aa5297d36910a6a07767f053af4f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-14 14:03:12</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>false</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
