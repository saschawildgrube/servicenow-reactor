<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Demonstrates the capability of Reactor to embedd React components into a ServiceNow UI Page.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_reactor.ReactorDemoApp</name>
        <script><![CDATA[class ReactorDemoApp extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		this.state = {
			state: 'home',
			ruler_value: 50,
			tabnavigation_value: 'beta',
			tabcontainer_value: 'incident'
		};
		this.title = 'Reactor';
	}

	onClickHeaderMenu(strOption)
	{
		this.setState( {state: strOption } );
	}
	
	onClickButton()
	{
		DoModalMessage(this.title,'The button has been clicked!',function(){});		
	}
	onClickButtonSelection(strValue)
	{
		DoModalMessage(this.title,'Selected option: '+strValue,function(){});		
	}
	onClickToolBar(strValue)
	{
		DoModalMessage(this.title,'The Tool has been clicked: '+strValue,function(){});		
	}
	onTabNavigationSelect(strValue)
	{
		this.setState( { tabnavigation_value: strValue } );
	}	
	onTabNavigationClose(strValue)
	{	
		DoModalMessage(this.title,'The tab close icon has been clicked: '+strValue,function(){});	
	}	
	onTabContainerSelect(strValue)
	{
		this.setState( { tabcontainer_value: strValue } );		
	}		
	onTabContainerClose(strValue)
	{
		DoModalMessage(
			this.title,
			'The tab close icon has been clicked: '+strValue,
			function(){});	
	}		
	onTreeNavigationClick(strValue)
	{
		DoModalMessage(
			this.title,
			'The following TreeNavigation item has been clicked: '+strValue,
			function(){});		
	}	
	onTreeNavigationFilterReset()
	{
		//this.setState( { treenavigation_filter: '' } );
	}
	onChangeRuler(nNewValue)
	{
		this.setState( { ruler_value: nNewValue} );
	}	
	onLoadIFrame(strUrl,strName)
	{
		DoModalMessage(
			this.title,
			'We can respond to the onLoad event of the iFrame (name: "'+strName+'"):\n'+strUrl,
			function(){});
	}
	onChangeFilter(filterStates)
	{
		this.setState( { filters: filterStates} );
	}
	
	render()
	{
		var strText = GetStringValue(this.props.text);
		if (strText == '')
		{
			strText = 'This is a demonstration of the Reactor app capability to embedd React components in ServiceNow.';
		}

		
		var aMenuItems = [];
		aMenuItems.push({ label: 'Home', option: 'home' });
		aMenuItems.push({ label: 'Button', option: 'button' });
		aMenuItems.push({ label: 'ButtonSelection', option: 'buttonselection' });
		aMenuItems.push({ label: 'ToolBar', option: 'toolbar' });
		aMenuItems.push({ label: 'TabNavigation', option: 'tabnavigation' });
		aMenuItems.push({ label: 'TabContainer', option: 'tabcontainer' });
		aMenuItems.push({ label: 'TreeNavigation', option: 'treenavigation' });
		aMenuItems.push({ label: 'Messages', option: 'messages' });
		aMenuItems.push({ label: 'RoundedBox', option: 'roundedbox' });
		aMenuItems.push({ label: 'Table', option: 'table' });
		aMenuItems.push({ label: 'Clock', option: 'clock' });
		aMenuItems.push({ label: 'Ruler', option: 'ruler' });
		aMenuItems.push({ label: 'ReactorJSXDemo', option: 'jsx' });
		aMenuItems.push({ label: 'Centered', option: 'centered' });
		aMenuItems.push({ label: 'IFrame', option: 'iframe' });
		aMenuItems.push({ label: 'Tables', option: 'tables' });
		aMenuItems.push({ label: 'Google Maps', option: 'googlemaps' });
		aMenuItems.push({ label: 'Filters', option: 'filters' });
		aMenuItems.push({ label: 'Tokens', option: 'tokens' });
		aMenuItems.push({ label: 'Workspace', option: 'workspace' });
			
		var aComponents = [];
		aComponents.push(e(HeaderMenu,
			{
				key: 'header_menu',
				items: aMenuItems,
				active: this.state.state,
				callbackOnClick: this.onClickHeaderMenu
			}, null));
	
		
		if (this.state.state == 'home')
		{
			aComponents.push(e('p', { key: 'text' }, strText));
		}
		else if (this.state.state == 'button')
		{
			aComponents.push(e(Button,
				{
					key: 'button',
					text: 'Please click this button',
					className: 'btn btn-primary',
					callbackOnClick: this.onClickButton 
				}, null));
		}
		else if (this.state.state == 'buttonselection')
		{
			aComponents.push(e(ButtonSelection,
				{
					items: [
						{
							label: 'Option 1',
							value: '1'
						},
						{
							label: 'Option 2',
							value: '2'
						},
						{
							label: 'Option 3',
							value: '3'
						}
					],
					callbackOnClick: this.onClickButtonSelection 
				}, null));
		}		
		else if (this.state.state == 'toolbar')
		{
			var aTools = [];
			aTools.push({
				text: 'Rocket',
				icon: 'rocket',
				value: 'rocket'
				});
			aTools.push({
				text: 'Car',
				icon: 'car',
				value: 'car'
				});
			aTools.push({
				text: '',
				icon: 'plane',
				value: 'plane'
				});
			aTools.push({
				text: 'Ship',
				icon: '',
				value: 'ship'
				});
			aComponents.push(e(ToolBar,
				{
					tools: aTools,
					callbackOnClick: this.onClickToolBar 
				}, null));
		}		
		else if (this.state.state == 'tabnavigation')
		{
			var aItems = [];
			aItems.push({
				label: 'Alpha',
				value: 'alpha'
				});
			aItems.push({
				label: 'Beta',
				value: 'beta'
				});
			aItems.push({
				label: 'Gamma',
				value: 'gamma'
				});
			aComponents.push(e(TabNavigation,
				{
					items: aItems,
					value: this.state.tabnavigation_value,
					callbackOnSelect: this.onTabNavigationSelect,
					callbackOnClose: this.onTabNavigationClose 
				}, null));
			aComponents.push(e('p',{},'Selected Tab: '+this.state.tabnavigation_value));
		}				
		else if (this.state.state == 'tabcontainer')
		{
			var aItems = [];
			aItems.push({
				label: 'Incident',
				value: 'incident',
				content: e(IFrame, { url: '/incident_list.do', name: 'incident'} )
				});
			aItems.push({
				label: 'Problem',
				value: 'problem',
				content: e(IFrame, { url: '/problem_list.do', name: 'problem'} )
				});
			aItems.push({
				label: 'Change',
				value: 'change',
				content: e(IFrame, { url: '/change_request_list.do', name: 'change'} )
				});
			var tabcontainer = e(TabContainer,
				{
					items: aItems,
					value: this.state.tabcontainer_value,
					callbackOnChange: this.onTabContainerSelect,
					callbackOnClose: this.onTabContainerClose,
				}, null);

			aComponents.push(e('div',
				{
					style:
					{
						minHeight: '50vh'
					}
				},tabcontainer));
		}				
		else if (this.state.state == 'treenavigation')
		{
			var treenavigation = {
				items: [
					{
						label: 'Item 1',
						items: [
							{ label: 'Item 1.1', value: '1.1' },
							{ label: 'Item 1.2', value: '1.2' },
							{ label: 'Item 1.3', value: '1.3' }
						]
					},
					{
						label: 'Item 2',
						items: [
							{
								label: 'Item 2.1',
								items: [
									{ label: 'Item 2.1.1', value: '2.1.1' },
									{ label: 'Item 2.1.2', value: '2.1.2' },
									{ label: 'Item 2.1.3', value: '2.1.3' }
								]},
							{
								label: 'Item 2.2', value: '2.2'
							},
							{
								label: 'Item 2.3', value: '2.3'
							}
						]
					}
				]
			};
			aComponents.push(e(TreeNavigation,
				{
					filter_show: true,
					treenavigation: treenavigation,
					callbackOnClick: this.onTreeNavigationClick,
					callbackOnFilterReset: this.onTreeNavigationFilterReset
				}, null));
		}		
		else if (this.state.state == 'messages')
		{
			aComponents.push(e(ErrorMessage,
				{
					text: 'This is an error message' 
				}, null));
			aComponents.push(e(WarningMessage,
				{
					text: 'This is a warning message' 
				}, null));				
			aComponents.push(e(InfoMessage,
				{
					text: 'This is an info message' 
				}, null));		
		}		
		else if (this.state.state == 'roundedbox')
		{
			aComponents.push(e(RoundedBox,{},'This is a rounded box.'));
			aComponents.push(e(RoundedBox,{},'This is a second rounded box.'));				
		}			
		else if (this.state.state == 'table')
		{
			var aCells = [];
			
			aCells.push(
				[
					{
						header: true,
						content: 'Column 1'
					},
					{
						header: true,
						content: 'Column 2'
					},
					{
						header: true,
						content: 'Column 3'
					}
				]
			);
			
			aCells.push(
				[
					{
						content: 'Row 1, Column 1'
					},
					'Row 1, Column 2',
					{
						content: 'Row 1, Column 3',
						header: false
					}
				]
			);			
			
			aCells.push(
				[
					'Row 2, Column 1',
					'Row 2, Column 2',
					'Row 2, Column 3'
				]
			);					
			
			aComponents.push(e(TableComponent,
				{
					cells: aCells,
					classname: ''
				}, null));
		}
		else if (this.state.state == 'clock')
		{
			aComponents.push(e(Clock,
				{
					key: 'clock'
				}, null));
		}
		else if (this.state.state == 'ruler')
		{
			aComponents.push(e(Ruler,
				{
					key: 'ruler', 
					max: 100,
					value: this.state.ruler_value,
					callbackOnChange: this.onChangeRuler
				}, null));
			aComponents.push(e('div',{ key: 'ruler_value' },'The value is '+this.state.ruler_value));	
		}
		else if (this.state.state == 'jsx')
		{
			aComponents.push(e(ReactorJSXDemoController,{ key: 'jsx', label: 'A button made with JSX' },null));	

		}		
		else if (this.state.state == 'centered')
		{
			aComponents.push(
				e('div',
					{
						style:
						{
							width: '600px',
							height: '500px',
							backgroundColor: 'RGB(var(--now-alert--warning--background-color))'
						}
					},
					e(Centered,{},
						e('div',
							{
								style:
								{
									width: '200px',
									height: '100px',
									backgroundColor: 'RGB(var(--now-alert--critical--background-color))'
								},
							},
							'This DIV is centered!'
						)
					)
				)
			);	

		}			
		else if (this.state.state == 'iframe')
		{
			aComponents.push(
				e(IFrame,
					{
						key: 'iframe',
						url: '/incident_list.do',
						name: 'incident_list',
						callbackOnLoad: this.onLoadIFrame
					},null)
			);	

		}		
		else if (this.state.state == 'tables')
		{
			aComponents.push(
				e(AllTablesController,
					{
						key: 'tables'
					},null)
			);	

		}		
		else if (this.state.state == 'googlemaps')
		{
			var iconAirport = {
				path: 'CIRCLE',
				fillColor: 'blue',
				scale: 10,
				fillOpacity: 1,
				strokeWeight: 5,
				strokeColor: 'black',	
			};
			var aMarkers = [
				{
					tooltip: 'Frankfurt',
					latitude: 50.12,
					longitude: 8.68,
					link: 'https://en.wikipedia.org/wiki/Frankfurt',
					link_new_window: true
				},				
				{
					tooltip: 'Frankfurt International Airport (EDDF)',
					latitude: 50.033333,
					longitude: 8.570556,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/Frankfurt_Airport',
					link_new_window: true
				},
				{
					tooltip: 'Courchevel Altiport (LFLJ)',
					latitude: 45.3975,
					longitude: 6.634444,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/Courchevel_Altiport',
					link_new_window: true
				},
				{
					tooltip: 'London Heathrow (EGLL)',
					latitude: 51.4775,
					longitude: -0.461389,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/Heathrow_Airport',
					link_new_window: true
				}/*,
				{
					tooltip: 'New York La Guardia (KLGA)',
					latitude: 40.775,
					longitude:  -73.875,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/LaGuardia_Airport',
					link_new_window: true
				}*/
			];

			var iconEnd =
				{
					path: 'FORWARD_CLOSED_ARROW',
					scale: 6,
					strokeColor: 'black',
					strokeWeight: 2,
					fillOpacity: 1,
					fillColor: 'blue',
				};

			var aPolylines = [
				{
					zIndex: 9999,
					strokeColor: 'blue',
					strokeDashRepeat: '30px',
					strokeDashScale: 7,
					iconEnd: iconEnd,
					path: [
						{
							latitude: 50.033333,
							longitude: 8.570556,
						},
						{
							latitude: 45.3975,
							longitude: 6.634444,
						}
					]
				}
			];

			var aHeatmaps = [
				{
					opacity: 1,
					radius: 30,
					data: [
						{
							latitude: 49,
							longitude: 8,
							weight: 1
						},
						{
							latitude: 48,
							longitude: 7,
							weight: 0.5
						}
					]
				}
			];
	
			aComponents.push(
				e(GoogleMaps,
					{
						//center: { latitude: 30, longitude: 20 },
						//zoom: 3,
						//type: 'roadmap',
						//type: 'hybrid',
						type: 'satellite',
						markers: aMarkers,
						polylines: aPolylines,
						heatmaps: aHeatmaps
					},null)
			);	

		}		
		else if (this.state.state == 'filters')
		{
			var compFilters = e(Filters,
				{
					callbackOnChange: this.onChangeFilter,
					filters: 
						[
							{
								table: 'incident',
								field: 'number',
								caption: 'Number',
								type: 'text'
							},
							{
								table: 'incident',
								field: 'short_description',
								caption: 'Short Description',
								type: 'text'
							},
							/*{
								table: 'incident',
								field: 'active',
								caption: 'Active',
								type: 'bool'
							},*/
							/*{
								table: 'incident',
								field: 'contact_type',
								caption: 'Contact Type',
								type: 'dropdown',
								options: [
										{
											value: 'email',
											caption: 'Email'
										},
										{
											value: 'chat',
											caption: 'Chat'
										},
									]
							}*/
						]
				},null);


			var filters = this.state.filters;

			var incidentFilters = GetValue(filters,'incident');

			var strQuery = '';

			var aFields = GetKeys(incidentFilters);
			for (var nField = 0; nField < aFields.length; nField++)
			{
				var strField = aFields[nField];
				var strValue = GetStringValue(GetValue(incidentFilters,strField));
				if (strValue != '')
				{
					if (strQuery != '')
					{
						strQuery += '^';
					}
					strQuery += strField + 'CONTAINS' + strValue;
				}
			}

			var strQueryEncoded = encodeURIComponent(strQuery);

			//var compContent = RenderValue(this.state.filters);
			var compContent = e(IFrame,
					{
						key: 'incident',
						url: '/incident_list.do?sysparm_query='+strQueryEncoded
					},null);

			var compLeft = e('div', { 

				style: 
				{
					flex: '0 1 auto',
					minWidth: '250px',
					maxWidth: '400px',
					height: '100%',
					//overflowY: 'auto',
					
					display: 'flex',
					flexDirection: 'column',
				}

			}, compFilters);

			var compRight = e('div',{

				style:
				{
					flex: '1 1 auto',
					height: '100%',
					
					display: 'flex',
					flexDirection: 'column'
				}

			},compContent);


			aComponents.push( e('div',{

				style:
				{
					flex: '1 1 auto',
					width: '100%',
					height: '100%',
					
					display: 'flex',
					flexDirection: 'row',
				}

			},
				[compLeft,
				compRight]));
		}			
		else if (this.state.state == 'tokens')
		{
			aComponents.push( e('p',{},
				'demo1 is a text token: "{dem'+'o1}" is replaced by "{demo1}".'));	
			aComponents.push( e('p',{},
				'demo2 is a system property token: "{dem'+'o2}" is replaced by "{demo2}".'));	
			aComponents.push( e('p',{},
				'demo3 is a script token: "{dem'+'o3}" is replaced by "{demo3}".'));	
		}			
		else if (this.state.state == 'workspace')
		{
			return e(Workspace,
				{
					logo: 'LOGO',
					menu: 'MENU',
					user: 'USER',
					toolbar: 'TOOLBAR',
					leftbarheader: 'LEFTBARHEADER',	
					treenavigation: 'TREENAVIGATION',
					content: 'CONTENT',
					sidebar: 'SIDEBAR',
					status: 'STATUS',
				},null);	
		}			
		
		return e('div', {
			style: {
				display: 'block',
				height: '80vh'
				}
			},aComponents);
	}
	
}]]></script>
        <script_name>ReactorDemoApp</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-16 17:09:30</sys_created_on>
        <sys_id>cab950e4db8e5510dcbdd03cd3961940</sys_id>
        <sys_mod_count>231</sys_mod_count>
        <sys_name>x_snc_reactor.ReactorDemoApp</sys_name>
        <sys_package display_value="Reactor WORK IN PROGRESS" source="x_snc_reactor">e5879c7fdb39d110dcbdd03cd3961946</sys_package>
        <sys_policy/>
        <sys_scope display_value="Reactor WORK IN PROGRESS">e5879c7fdb39d110dcbdd03cd3961946</sys_scope>
        <sys_update_name>sys_ui_script_cab950e4db8e5510dcbdd03cd3961940</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-28 15:10:05</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>false</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
