<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Demonstrates the capability of Reactor to embedd React components into a ServiceNow UI Page.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_reactor.ReactorDemoApp</name>
        <script><![CDATA[class ReactorDemoApp extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		this.state = {
			state: 'home',
			ruler_value: 50
		};
	}

	onHeaderMenuClick(strOption)
	{
		this.setState( {state: strOption } );
	}
	
	onButtonClick()
	{
		DoModalMessage('Reactor','The button has been clicked!',function(){});		
	}
	onToolBarClick(strValue)
	{
		DoModalMessage('Reactor','The Tool has been clicked: '+strValue,function(){});		
	}
	onTreeNavigationClick(strValue)
	{
		DoModalMessage('Reactor','The following TreeNavigation item has been clicked: '+strValue,function(){});		
	}	
	onRulerChange(nNewValue)
	{
		this.setState( { ruler_value: nNewValue} );
	}	
	onIFrameLoad(strUrl)
	{
		DoModalMessage('Reactor','We can respond to the onLoad event of the iFrame:\n'+strUrl);
	}
	
	render()
	{
		var strText = GetStringValue(this.props.text);
		if (strText == '')
		{
			strText = 'This is a demonstration of the Reactor app capability to embedd React components in ServiceNow.';
		}

		
		var aMenuItems = [];
		aMenuItems.push({ label: 'Home', option: 'home' });
		aMenuItems.push({ label: 'Button', option: 'button' });
		aMenuItems.push({ label: 'ToolBar', option: 'toolbar' });
		aMenuItems.push({ label: 'TreeNavigation', option: 'treenavigation' });
		aMenuItems.push({ label: 'Messages', option: 'messages' });
		aMenuItems.push({ label: 'Table', option: 'table' });
		aMenuItems.push({ label: 'Clock', option: 'clock' });
		aMenuItems.push({ label: 'Ruler', option: 'ruler' });
		aMenuItems.push({ label: 'ReactorJSXDemo', option: 'jsx' });
		aMenuItems.push({ label: 'Centered', option: 'centered' });
		aMenuItems.push({ label: 'IFrame', option: 'iframe' });
		aMenuItems.push({ label: 'Tables', option: 'tables' });
		aMenuItems.push({ label: 'Google Maps', option: 'googlemaps' });
		aMenuItems.push({ label: 'Workspace', option: 'workspace' });
			
		var aComponents = [];
		aComponents.push(e(HeaderMenu,
			{
				key: 'header_menu',
				items: aMenuItems,
				active: this.state.state,
				callbackOnClick: this.onHeaderMenuClick
			}, null));
	
		
		if (this.state.state == 'home')
		{
			aComponents.push(e('p', { key: 'text' }, strText));
		}
		else if (this.state.state == 'button')
		{
			aComponents.push(e(Button,
				{
					key: 'button',
					text: 'Please click this button',
					className: 'btn btn-primary',
					callbackOnClick: this.onButtonClick 
				}, null));
		}
		else if (this.state.state == 'toolbar')
		{
			var aTools = [];
			aTools.push({
				text: 'Rocket',
				icon: 'rocket',
				value: 'rocket'
				});
			aTools.push({
				text: 'Car',
				icon: 'car',
				value: 'car'
				});
			aTools.push({
				text: '',
				icon: 'plane',
				value: 'plane'
				});
			aTools.push({
				text: 'Ship',
				icon: '',
				value: 'ship'
				});
			aComponents.push(e(ToolBar,
				{
					tools: aTools,
					callbackOnClick: this.onToolBarClick 
				}, null));
		}		
		else if (this.state.state == 'treenavigation')
		{
			var treenavigation = {
				bogus: 'hello world',
				items: [
					{
						label: 'Item 1',
						items: [
							{ label: 'Item 1.1', value: '1.1' },
							{ label: 'Item 1.2', value: '1.2' },
							{ label: 'Item 1.3', value: '1.3' }
						]
					},
					{
						label: 'Item 2',
						items: [
							{
								label: 'Item 2.1',
								items: [
									{ label: 'Item 2.1.1', value: '2.1.1' },
									{ label: 'Item 2.1.2', value: '2.1.2' },
									{ label: 'Item 2.1.3', value: '2.1.3' }
								]},
							{
								label: 'Item 2.2', value: '2.2'
							},
							{
								label: 'Item 2.3', value: '2.3'
							}
						]
					}
				]
			};
			aComponents.push(e(TreeNavigation,
				{
					treenavigation: treenavigation,
					callbackOnClick: this.onTreeNavigationClick 
				}, null));
		}		
		else if (this.state.state == 'messages')
		{
			aComponents.push(e(ErrorMessage,
				{
					text: 'This is an error message' 
				}, null));
			aComponents.push(e(WarningMessage,
				{
					text: 'This is a warning message' 
				}, null));				
			aComponents.push(e(InfoMessage,
				{
					text: 'This is an info message' 
				}, null));		
		}		
		else if (this.state.state == 'table')
		{
			var aCells = [];
			
			aCells.push(
				[
					{
						header: true,
						content: 'Column 1'
					},
					{
						header: true,
						content: 'Column 2'
					},
					{
						header: true,
						content: 'Column 3'
					}
				]
			);
			
			aCells.push(
				[
					{
						content: 'Row 1, Column 1'
					},
					'Row 1, Column 2',
					{
						content: 'Row 1, Column 3',
						header: false
					}
				]
			);			
			
			aCells.push(
				[
					'Row 2, Column 1',
					'Row 2, Column 2',
					'Row 2, Column 3'
				]
			);					
			
			aComponents.push(e(TableComponent,
				{
					cells: aCells,
					classname: ''
				}, null));
		}
		else if (this.state.state == 'clock')
		{
			aComponents.push(e(Clock,
				{
					key: 'clock'
				}, null));
		}
		else if (this.state.state == 'ruler')
		{
			aComponents.push(e(Ruler,
				{
					key: 'ruler', 
					max: 100,
					value: this.state.ruler_value,
					callbackOnChange: this.onRulerChange
				}, null));
			aComponents.push(e('div',{ key: 'ruler_value' },'The value is '+this.state.ruler_value));	
		}
		else if (this.state.state == 'jsx')
		{
			aComponents.push(e(ReactorJSXDemoController,{ key: 'jsx', label: 'A button made with JSX' },null));	

		}		
		else if (this.state.state == 'centered')
		{
			aComponents.push(
				e('div',
					{
						style:
						{
							width: '600px',
							height: '500px',
							backgroundColor: '#cccccc'
						}
					},
					e(Centered,{},
						e('div',
							{
								style:
								{
									width: '200px',
									height: '100px',
									backgroundColor: 'lightblue'
								},
							},
							'This DIV is centered!'
						)
					)
				)
			);	

		}			
		else if (this.state.state == 'iframe')
		{
			aComponents.push(
				e(IFrame,
					{
						key: 'iframe',
						url: '/incident_list.do',
						callbackOnLoad: this.onIFrameLoad
					},null)
			);	

		}		
		else if (this.state.state == 'tables')
		{
			aComponents.push(
				e(AllTablesController,
					{
						key: 'tables'
					},null)
			);	

		}		
		else if (this.state.state == 'googlemaps')
		{
			var iconAirport = {
				path: 'CIRCLE',
				fillColor: 'red',
				scale: 10,
				fillOpacity: 1,
				strokeWeight: 5,
				strokeColor: 'grey',	
			};
			var aMarkers = [
				{
					tooltip: 'Frankfurt International Airport (EDDF)',
					latitude: 50.033333,
					longitude: 8.570556,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/Frankfurt_Airport'
				},
				{
					tooltip: 'Courchevel Altiport (LFLJ)',
					latitude: 45.3975,
					longitude: 6.634444,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/Courchevel_Altiport'
				},
				{
					tooltip: 'London Heathrow (EGLL)',
					latitude: 51.4775,
					longitude: -0.461389,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/Heathrow_Airport'
				},
				{
					tooltip: 'New York La Guardia (KLGA)',
					latitude: 40.775,
					longitude:  -73.875,
					icon: iconAirport,
					link: 'https://en.wikipedia.org/wiki/LaGuardia_Airport'
				}		

			]

			aComponents.push(
				e(GoogleMaps,
					{
						//center: { latitude: 30, longitude: 20 },
						zoom: 3,
						markers: aMarkers,
					},null)
			);	

		}		
		else if (this.state.state == 'workspace')
		{
			return e(Workspace,
				{
					logo: 'LOGO',
					menu: 'MENU',
					user: 'USER',
					toolbar: 'TOOLBAR',
					leftbarheader: 'LEFTBARHEADER',	
					treenavigation: 'TREENAVIGATION',
					content: 'CONTENT',
					sidebar: 'SIDEBAR',
					status: 'STATUS',
				},null);	
		}			
		
		return e('div', {
			style: {
				display: 'block',
				height: '80vh'
				}
			},aComponents);
	}
	
}]]></script>
        <script_name>ReactorDemoApp</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-16 17:09:30</sys_created_on>
        <sys_id>cab950e4db8e5510dcbdd03cd3961940</sys_id>
        <sys_mod_count>119</sys_mod_count>
        <sys_name>x_snc_reactor.ReactorDemoApp</sys_name>
        <sys_package display_value="Reactor WORK IN PROGRESS" source="x_snc_reactor">e5879c7fdb39d110dcbdd03cd3961946</sys_package>
        <sys_policy/>
        <sys_scope display_value="Reactor WORK IN PROGRESS">e5879c7fdb39d110dcbdd03cd3961946</sys_scope>
        <sys_update_name>sys_ui_script_cab950e4db8e5510dcbdd03cd3961940</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-20 16:14:06</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>false</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
